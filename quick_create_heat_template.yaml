heat_template_version: 2018-08-31

description: >
  Basic Heat template to create a VM with existing key for authentication, and all the prerequisites on the networking side to make it publicly accessible.

#Be sure to replace the Flavor, Image ID, Key Name, and potentially the Public Network ID.

parameters:
  flavor:
    type: string
    description: Flavor of the instance
    default: m1.medium
  image:
    type: string
    description: Image to use for the instance
    default: e44ed30d-e8f8-486a-92e2-f33a0dada737
  key_name:
    type: string
    description: Name of the SSH key to use
    default: brian
  public_net_id:
    type: string
    description: ID of the public network
    default: 46b9a179-8b26-40fa-b3ed-0927df4251e0

resources:
  private_net:
    type: OS::Neutron::Net
    properties:
      name: private_net

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: "192.168.0.0/24"
      gateway_ip: "192.168.0.1"
      ip_version: 4
      dns_nameservers:
        - "8.8.8.8"
        - "8.8.4.4"

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_net_id }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

  instance_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      security_groups: [{ get_resource: instance_security_group }]

  instance_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: instance_security_group
      description: Security group for the instance
      rules:
        - direction: ingress
          ethertype: IPv4
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - direction: ingress
          ethertype: IPv4
          protocol: icmp

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: instance_port }

  instance:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: instance_port }

outputs:
  instance_ip:
    description: IP address of the instance
    value: { get_attr: [floating_ip, floating_ip_address] }
